//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EntitySpaces.QuerySandbox.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("EntitySpaces.QuerySandbox.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OrdersQuery oq = new OrdersQuery();
        ///oq.Select
        ///(
        ///    oq.EmployeeID,
        ///    oq.ShipVia,
        ///    // Arithmetic Expression
        ///    (oq.EmployeeID + oq.ShipVia).As(&quot;StrangeColumnForSure&quot;)
        ///);
        ///
        ///OrdersCollection coll = new OrdersCollection();
        ///coll.Load(oq);
        ///
        ///return coll;.
        /// </summary>
        internal static string ArithmeticExpression {
            get {
                return ResourceManager.GetString("ArithmeticExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OrderDetailsQuery oq = new OrderDetailsQuery(); 
        ///
        ///oq.Select
        ///(
        ///	oq.Quantity,
        /// 	oq.UnitPrice,
        ///    oq.UnitPrice
        ///        .Case()
        ///            .When(oq.Quantity &lt; 50).Then(oq.UnitPrice)
        ///            .When(oq.Quantity &gt;= 50 &amp;&amp; oq.Quantity &lt; 70).Then(oq.UnitPrice * .90)
        ///            .When(oq.Quantity &gt;= 70 &amp;&amp; oq.Quantity &lt; 99).Then(oq.UnitPrice * .80)
        ///            .Else(oq.UnitPrice * .70)
        ///        .End().As(&quot;Adjusted Unit Price&quot;)
        ///
        ///).OrderBy(oq.Quantity.Descending); 
        ///
        ///OrderDetailsCollection coll = new O [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CaseThenWhen1 {
            get {
                return ResourceManager.GetString("CaseThenWhen1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EmployeesQuery q = new EmployeesQuery(); 
        ///
        ///q.Select
        ///(
        ///	q.LastName,
        ///    q.LastName
        ///        .Case()
        ///            .When(q.LastName.Like(&quot;%a%&quot;)).Then(&quot;Last Name Contains an A&quot;)
        ///            .Else(&quot;Last Name Doesnt Contain an A&quot;)
        ///        .End().As(&quot;SpecialLastName&quot;)
        ///); 
        ///
        ///EmployeesCollection coll = new EmployeesCollection();
        ///coll.Load(q);
        ///
        ///return coll;.
        /// </summary>
        internal static string CaseThenWhen2 {
            get {
                return ResourceManager.GetString("CaseThenWhen2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OrderDetailsQuery oiq = new OrderDetailsQuery(&quot;oi&quot;);
        ///ProductsQuery pq = new ProductsQuery(&quot;p&quot;);
        ///
        ///oiq.Select(
        ///    oiq.OrderID,
        ///    (oiq.Quantity * oiq.UnitPrice).Sum().As(&quot;Total&quot;)
        ///);
        ///oiq.Where(oiq.ProductID
        ///    .In(
        ///        pq.Select(pq.ProductID)
        ///        .Where(oiq.ProductID == pq.ProductID)
        ///    )
        ///);
        ///oiq.GroupBy(oiq.OrderID);
        ///
        ///OrderDetailsCollection collection = new OrderDetailsCollection();
        ///collection.Load(oiq);
        ///
        ///return collection;.
        /// </summary>
        internal static string CorrelatedSubQuery {
            get {
                return ResourceManager.GetString("CorrelatedSubQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OrdersQuery oq = new OrdersQuery(&quot;o&quot;);
        ///OrderDetailsQuery oiq = new OrderDetailsQuery(&quot;oi&quot;);
        ///
        ///oq.Select(oq.CustomerID, oq.OrderDate, &quot;&lt;sub.OrderTotal&gt;&quot;);
        ///oq.From
        ///    (
        ///        oiq.Select(oiq.OrderID,
        ///            (oiq.UnitPrice * oiq.Quantity).Sum().As(&quot;OrderTotal&quot;))
        ///            .GroupBy(oiq.OrderID)
        ///    ).As(&quot;sub&quot;);
        ///oq.InnerJoin(oq).On(oq.OrderID == oiq.OrderID);
        ///
        ///OrdersCollection collection = new OrdersCollection();
        ///collection.Load(oq);
        ///
        ///return collection;.
        /// </summary>
        internal static string FromSubQuery {
            get {
                return ResourceManager.GetString("FromSubQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Query for the Join
        ///OrderDetailsQuery odq = new OrderDetailsQuery(&quot;oi&quot;);
        ///
        ///// SubQuery of OrderItems with a discount
        ///OrderDetailsQuery odsq = new OrderDetailsQuery(&quot;ods&quot;);
        ///odsq.es.Distinct = true;
        ///odsq.Select(odsq.Discount);
        ///odsq.Where(odsq.Discount &gt; 0);
        ///
        ///// Orders with discounted items
        ///OrdersQuery oq = new OrdersQuery(&quot;o&quot;);
        ///oq.Select(oq.OrderID, odq.Discount);
        ///oq.InnerJoin(odq).On(oq.OrderID == odq.OrderID &amp;
        ///    odq.Discount.In(odsq));
        ///
        ///OrdersCollection collection = new OrdersCollection(); [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string JoinOnSubquery {
            get {
                return ResourceManager.GetString("JoinOnSubquery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OrdersQuery q = new OrdersQuery();
        ///q.Select(q.OrderID, q.Freight, q.ShipCountry);
        ///q.Where(q.Freight &gt; 5 &amp;&amp; q.Freight &lt; 20); // &lt;== see syntax
        ///q.OrderBy(q.Freight.Ascending);
        ///
        ///OrdersCollection coll = new OrdersCollection();
        ///coll.Load(q);
        ///
        ///return coll;.
        /// </summary>
        internal static string NativeLanguageSyntax {
            get {
                return ResourceManager.GetString("NativeLanguageSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EmployeesQuery q = new EmployeesQuery();
        ///q.Select(q.EmployeeID, q.LastName, q.FirstName);
        ///q.OrderBy(q.LastName.Descending);
        ///
        ///q.es.PageNumber = 2;
        ///q.es.PageSize = 5;
        ///
        ///EmployeesCollection coll = new EmployeesCollection();
        ///coll.Load(q);
        ///
        ///return coll;.
        /// </summary>
        internal static string PagingSample {
            get {
                return ResourceManager.GetString("PagingSample", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EmployeesCollection coll = new EmployeesCollection();
        ///coll.Query.SelectAllExcept(coll.Query.Photo);
        ///coll.Query.Load();
        ///
        ///return coll;.
        /// </summary>
        internal static string SelectAllExcept {
            get {
                return ResourceManager.GetString("SelectAllExcept", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OrdersQuery orders = new OrdersQuery(&quot;o&quot;);
        ///OrderDetailsQuery details = new OrderDetailsQuery(&quot;oi&quot;);
        ///
        ///orders.Select
        ///(
        ///    orders.OrderID,
        ///    orders.OrderDate,
        ///    details.Select(
        ///        details.UnitPrice.Max())
        ///        .Where(orders.OrderID == details.OrderID).As(&quot;MaxUnitPrice&quot;)
        ///);
        ///
        ///OrdersCollection collection = new OrdersCollection();
        ///collection.Load(orders);
        ///
        ///return collection;.
        /// </summary>
        internal static string SelectSubQuery {
            get {
                return ResourceManager.GetString("SelectSubQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OrdersQuery orders = new OrdersQuery(&quot;o&quot;);
        ///OrderDetailsQuery details = new OrderDetailsQuery(&quot;oi&quot;);
        ///
        ///orders.Select
        ///(
        ///    orders, // &lt;== this means orders.*
        ///    details.Select(
        ///        details.UnitPrice.Max())
        ///        .Where(orders.OrderID == details.OrderID).As(&quot;MaxUnitPrice&quot;)
        ///);
        ///
        ///OrdersCollection collection = new OrdersCollection();
        ///collection.Load(orders);
        ///
        ///return collection;.
        /// </summary>
        internal static string SelectSubQueryAllOrderColumns {
            get {
                return ResourceManager.GetString("SelectSubQueryAllOrderColumns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // SubQuery using the ALL operator.
        ///// Get a list of customers whose zip code
        ///// is greater than all the customers in Oregon.
        ///CustomersQuery cq2 = new CustomersQuery(&quot;c2&quot;);
        ///cq2.es.All = true;
        ///cq2.Select(cq2.PostalCode);
        ///cq2.Where(cq2.Region == &quot;OR&quot;);
        ///
        ///CustomersQuery cq1 = new CustomersQuery(&quot;c1&quot;);
        ///cq1.Select(cq1.CustomerID, cq1.CompanyName, cq1.PostalCode);
        ///cq1.Where(cq1.PostalCode &gt; cq2);
        ///
        ///CustomersCollection coll = new CustomersCollection();
        ///coll.Load(cq1);
        ///
        ///return coll;.
        /// </summary>
        internal static string SubQueryWithAllOperator {
            get {
                return ResourceManager.GetString("SubQueryWithAllOperator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // SubQuery using the ANY operator.
        ///// Get a list of employees who were hired
        ///// before the year any employee turned 27.
        ///EmployeesQuery eq2 = new EmployeesQuery(&quot;e2&quot;);
        ///eq2.es.Any = true;
        ///eq2.Select(eq2.BirthDate.DatePart(&quot;yyyy&quot;) + 27);
        ///
        ///EmployeesQuery eq1 = new EmployeesQuery(&quot;e1&quot;);
        ///eq1.Select(eq1.EmployeeID, eq1.LastName);
        ///eq1.Where(eq1.HireDate.DatePart(&quot;yyyy&quot;) &lt; eq2);
        ///
        ///EmployeesCollection coll = new EmployeesCollection();
        ///coll.Load(eq1);
        ///
        ///return coll;.
        /// </summary>
        internal static string SubQueryWithAnyOperator {
            get {
                return ResourceManager.GetString("SubQueryWithAnyOperator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // OrderID and ProductID for Order Details
        ///// with Products whose name begins with &quot;G&quot;
        ///// from Suppliers whose city begins with &quot;S&quot;.
        ///
        ///OrderDetailsQuery oq = new OrderDetailsQuery(&quot;o&quot;);
        ///ProductsQuery pq = new ProductsQuery(&quot;p&quot;);
        ///SuppliersQuery sq = new SuppliersQuery(&quot;s&quot;);
        ///
        ///oq.Select(
        ///    oq.OrderID,
        ///    oq.ProductID
        ///).Where(oq.ProductID.In(
        ///    	pq.Select(pq.ProductID)
        ///    	.Where(pq.ProductName.Like(&quot;G%&quot;) &amp;&amp; pq.SupplierID.In(
        ///             sq.Select(sq.SupplierID)
        ///            .Where(sq.City.L [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TraditionalSqlStyle {
            get {
                return ResourceManager.GetString("TraditionalSqlStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Query for the Join
        ///OrderDetailsQuery odq = new OrderDetailsQuery(&quot;oi&quot;);
        ///
        ///// Orders with discounted items
        ///OrdersQuery oq = new OrdersQuery(&quot;o&quot;);
        ///oq.Select(oq.OrderID, odq.Discount);
        ///oq.InnerJoin(odq).On(oq.OrderID == odq.OrderID);
        ///oq.Where(odq.Discount &gt; 0);
        ///
        ///OrdersCollection collection = new OrdersCollection();
        ///collection.Load(oq);
        ///
        ///return collection;.
        /// </summary>
        internal static string TypicalJoin {
            get {
                return ResourceManager.GetString("TypicalJoin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EmployeesQuery sq = new EmployeesQuery(&quot;s&quot;);
        ///sq.es.Distinct = true;
        ///sq.Select(sq.EmployeeID);
        ///sq.Where(sq.ReportsTo.IsNull());
        ///
        ///// If even one employee has a null supervisor,
        ///// i.e., the above query has a result set,
        ///// then run a list of all employees.
        ///EmployeesQuery eq = new EmployeesQuery(&quot;e&quot;);
        ///eq.Select(eq.EmployeeID, eq.ReportsTo);
        ///eq.Where(eq.Exists(sq));
        ///
        ///EmployeesCollection collection = new EmployeesCollection();
        ///collection.Load(eq);
        ///
        ///return collection;.
        /// </summary>
        internal static string WhereExists {
            get {
                return ResourceManager.GetString("WhereExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EmployeeTerritoriesQuery etq = new EmployeeTerritoriesQuery(&quot;et&quot;);
        ///etq.Select(etq.TerritoryID);
        ///etq.Where(etq.EmployeeID == 1);
        ///
        ///// Territories that Employee 1 is not assigned to.
        ///TerritoriesQuery tq = new TerritoriesQuery(&quot;t&quot;);
        ///tq.Select(tq.TerritoryDescription);
        ///tq.Where(tq.TerritoryID.NotIn(etq));
        ///
        ///TerritoriesCollection collection = new TerritoriesCollection();
        ///collection.Load(tq);
        ///
        ///return collection;.
        /// </summary>
        internal static string WhereNotInSubQuery {
            get {
                return ResourceManager.GetString("WhereNotInSubQuery", resourceCulture);
            }
        }
    }
}
